<?php

namespace Sdz\BlogBundle\Repository;
use Doctrine\ORM\Query;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{

    public function myFindAll()
    {
        $queryBuilder = $this->createQueryBuilder('a');
        // Méthode équivalente, mais plus longue :
                $queryBuilder = $this->_em->createQueryBuilder()
                    ->select('a')
                    ->from($this->_entityName, 'a');
        // Dans un repository, $this->_entityName est le namespace de l'entité gérée
        // Ici, il vaut donc Sdz\BlogBundle\Entity\Article
        // On a fini de construire notre requête
        // On récupère la Query à partir du QueryBuilder
        $query = $queryBuilder->getQuery();
        // On récupère les résultats à partir de la Query
        $resultats = $query->getResult();
        // On retourne ces résultats
       // return $resultats;

        return $this->createQueryBuilder('a')->getQuery()->getResult();
    }

    public function myFindOne($id)
    {
        // On passe par le QueryBuilder vide de l'EntityManager pour l'exemple
        $qb = $this->_em->createQueryBuilder();
        $qb->select('a')
           ->from('SdzBlogBundle:Article', 'a')
           ->where('a.id = :id')
           ->setParameter('id', $id);

       // return $qb->getQuery()->getResult();
      //  return $qb->getQuery()->getOneOrNullResult();
         return $qb->getQuery()->getSingleResult();
       // return $qb->getQuery()->getSingleScalarResult();
    }

    public function findByAuthorAndDate($author, $newDate)
    {
            // On utilise le QueryBuilder créé par le repository directement pour gagner du temps
            // Plus besoin de faire le select() ni le from() par la suite donc
            $qb = $this->createQueryBuilder('a');
            $qb->where('a.author = :author')
                ->setParameter('author', $author)
                ->andWhere('a.date < :newDate')
                ->setParameter('newDate', $newDate)
                ->orderBy('a.date', 'DESC');

            return $qb->getQuery()->getResult();
    }

    public function whereCurrentYear(\Doctrine\ORM\QueryBuilder $qb)
    {
        $qb->andWhere('a.date BETWEEN :start AND :end')
            ->setParameter('start', new \Datetime(date('Y').'-01-01')) // Date entre le 1er janvier de cette année
            ->setParameter('end', new \Datetime(date('Y').'-12-31')); // Et le 31 décembre de cette année
        return $qb;
    }


    public function myFind()
    {
        $qb = $this->createQueryBuilder('a');

        // On peut ajouter ce qu'on veut avant
        $qb->where('a.author = :author')
            ->setParameter('author', 'Selmi');

        // On applique notre condition
        $qb = $this->whereCurrentYear($qb);

       // On peut ajouter ce qu'on veut après
        $qb->orderBy('a.date', 'DESC');

      //  return $qb->getQuery()->getResult();
      //  return $qb->getQuery()->getArrayResult();

        return $qb->getQuery()->execute(array(), Query::HYDRATE_ARRAY);
       // return $qb->getQuery()->getScalarResult();

    }
}
