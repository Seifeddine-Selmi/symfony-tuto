<?php

namespace Sdz\BlogBundle\Repository;
use Doctrine\ORM\Query;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{
    public function getArticles($nbPerPage, $page)
    {
      /*  if ($page < 1) {
            throw new \InvalidArgumentException('L\'argument $page ne peut être inférieur à 1 (valeur : "'.$page.'").');
        }*/

        $query = $this->createQueryBuilder('a')
            ->leftJoin('a.image', 'i')
              ->addSelect('i')
            ->leftJoin('a.categories', 'c')
              ->addSelect('c')
           // ->orderBy('a.date', 'DESC')
            ->getQuery();

        if ($page < 1) {
            $query->setMaxResults($nbPerPage);
        }else{
            // On définit l'article à partir duquel commencer la liste
            $query->setFirstResult(($page-1) * $nbPerPage)
                  ->setMaxResults($nbPerPage);
        }


        return new Paginator($query);
      //  return $query->getResult();
    }



    public function getSelectList()
    {
        $qb = $this->createQueryBuilder('a')
            ->where('a.published = 1');

       return $qb;
    }

    public function myFindAll()
    {
        $queryBuilder = $this->createQueryBuilder('a');
        // Méthode équivalente, mais plus longue :
                $queryBuilder = $this->_em->createQueryBuilder()
                    ->select('a')
                    ->from($this->_entityName, 'a');
        // Dans un repository, $this->_entityName est le namespace de l'entité gérée
        // Ici, il vaut donc Sdz\BlogBundle\Entity\Article
        // On a fini de construire notre requête
        // On récupère la Query à partir du QueryBuilder
        $query = $queryBuilder->getQuery();
        // On récupère les résultats à partir de la Query
        $resultats = $query->getResult();
        // On retourne ces résultats
       // return $resultats;

        return $this->createQueryBuilder('a')->getQuery()->getResult();
    }

    public function myFindOne($id)
    {
        // On passe par le QueryBuilder vide de l'EntityManager pour l'exemple
        $qb = $this->_em->createQueryBuilder();
        $qb->select('a')
           ->from('SdzBlogBundle:Article', 'a')
           ->where('a.id = :id')
           ->setParameter('id', $id);

       // return $qb->getQuery()->getResult();
      //  return $qb->getQuery()->getOneOrNullResult();
         return $qb->getQuery()->getSingleResult();
       // return $qb->getQuery()->getSingleScalarResult();
    }

    public function findByAuthorAndDate($author, $newDate)
    {
            // On utilise le QueryBuilder créé par le repository directement pour gagner du temps
            // Plus besoin de faire le select() ni le from() par la suite donc
            $qb = $this->createQueryBuilder('a');
            $qb->where('a.author = :author')
                ->setParameter('author', $author)
                ->andWhere('a.date < :newDate')
                ->setParameter('newDate', $newDate)
                ->orderBy('a.date', 'DESC');

            return $qb->getQuery()->getResult();
    }

    public function whereCurrentYear(\Doctrine\ORM\QueryBuilder $qb)
    {
        $qb->andWhere('a.date BETWEEN :start AND :end')
            ->setParameter('start', new \Datetime(date('Y').'-01-01')) // Date entre le 1er janvier de cette année
            ->setParameter('end', new \Datetime(date('Y').'-12-31')); // Et le 31 décembre de cette année
        return $qb;
    }


    public function myFind()
    {
        $qb = $this->createQueryBuilder('a');

        // On peut ajouter ce qu'on veut avant
        $qb->where('a.author = :author')
            ->setParameter('author', 'Selmi');

        // On applique notre condition
        $qb = $this->whereCurrentYear($qb);

       // On peut ajouter ce qu'on veut après
        $qb->orderBy('a.date', 'DESC');

      //  return $qb->getQuery()->getResult();
      //  return $qb->getQuery()->getArrayResult();

        return $qb->getQuery()->execute(array(), Query::HYDRATE_ARRAY);
       // return $qb->getQuery()->getScalarResult();

    }

 /*** Utilisation du Doctrine Query Language (DQL) ***/

    // Depuis un repository
    public function myFindAllDQL()
    {
        $query = $this->_em->createQuery('SELECT a FROM SdzBlogBundle:Article a');
        $resultats = $query->getResult();
        return $resultats;
    }


    public function myFindDQL($id)
    {
        $query = $this->_em->createQuery('SELECT a FROM SdzBlogBundle:Article a WHERE a.id = :id');
        $query->setParameter('id', $id);
        return $query->getSingleResult();
    }


    // Depuis le repository d'Article
    public function getArticleAndComments()
    {
        $qb = $this->createQueryBuilder('a')
            ->leftJoin('a.comments', 'c')
           // ->leftJoin('a.comments', 'c', 'WITH', 'YEAR(c.date) > 2011')
            ->addSelect('c');
        return $qb->getQuery()->getResult();
    }


    public function getArticleAndCategories()
    {
        $qb = $this->createQueryBuilder('a')
            ->leftJoin('a.categories', 'c')
            ->addSelect('c');
        return $qb->getQuery()->getResult();
    }

    public function getAndCategories(array $nom_categories)
    {
        $qb = $this->createQueryBuilder('a');

        // On fait une jointure avec l'entité Categorie, avec pour alias « c »
        $qb ->join('a.categories', 'c')
            ->where($qb->expr()->in('c.name', $nom_categories)); // Puis on filtre sur le nom des catégories à l'aide d'un IN

        // Enfin, on retourne le résultat
        return $qb->getQuery()->getResult();
    }
}
